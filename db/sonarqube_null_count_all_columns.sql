SELECT
    SUM(CASE WHEN project IS NOT NULL THEN 1 ELSE 0 END) AS project,
    SUM(CASE WHEN version IS NOT NULL THEN 1 ELSE 0 END) AS version,
    SUM(CASE WHEN date IS NOT NULL THEN 1 ELSE 0 END) AS date,
    SUM(CASE WHEN revision IS NOT NULL THEN 1 ELSE 0 END) AS revision,
    SUM(CASE WHEN complexity IS NOT NULL THEN 1 ELSE 0 END) AS complexity,
    SUM(CASE WHEN class_complexity IS NOT NULL THEN 1 ELSE 0 END) AS class_complexity,
    SUM(CASE WHEN function_complexity IS NOT NULL THEN 1 ELSE 0 END) AS function_complexity,
    SUM(CASE WHEN file_complexity IS NOT NULL THEN 1 ELSE 0 END) AS file_complexity,
    SUM(CASE WHEN function_complexity_distribution IS NOT NULL THEN 1 ELSE 0 END) AS function_complexity_distribution,
    SUM(CASE WHEN file_complexity_distribution IS NOT NULL THEN 1 ELSE 0 END) AS file_complexity_distribution,
    SUM(CASE WHEN complexity_in_classes IS NOT NULL THEN 1 ELSE 0 END) AS complexity_in_classes,
    SUM(CASE WHEN complexity_in_functions IS NOT NULL THEN 1 ELSE 0 END) AS complexity_in_functions,
    SUM(CASE WHEN cognitive_complexity IS NOT NULL THEN 1 ELSE 0 END) AS cognitive_complexity,
    SUM(CASE WHEN test_errors IS NOT NULL THEN 1 ELSE 0 END) AS test_errors,
    SUM(CASE WHEN skipped_tests IS NOT NULL THEN 1 ELSE 0 END) AS skipped_tests,
    SUM(CASE WHEN test_failures IS NOT NULL THEN 1 ELSE 0 END) AS test_failures,
    SUM(CASE WHEN tests IS NOT NULL THEN 1 ELSE 0 END) AS tests,
    SUM(CASE WHEN test_execution_time IS NOT NULL THEN 1 ELSE 0 END) AS test_execution_time,
    SUM(CASE WHEN test_success_density IS NOT NULL THEN 1 ELSE 0 END) AS test_success_density,
    SUM(CASE WHEN coverage IS NOT NULL THEN 1 ELSE 0 END) AS coverage,
    SUM(CASE WHEN lines_to_cover IS NOT NULL THEN 1 ELSE 0 END) AS lines_to_cover,
    SUM(CASE WHEN uncovered_lines IS NOT NULL THEN 1 ELSE 0 END) AS uncovered_lines,
    SUM(CASE WHEN line_coverage IS NOT NULL THEN 1 ELSE 0 END) AS line_coverage,
    SUM(CASE WHEN conditions_to_cover IS NOT NULL THEN 1 ELSE 0 END) AS conditions_to_cover,
    SUM(CASE WHEN uncovered_conditions IS NOT NULL THEN 1 ELSE 0 END) AS uncovered_conditions,
    SUM(CASE WHEN branch_coverage IS NOT NULL THEN 1 ELSE 0 END) AS branch_coverage,
    SUM(CASE WHEN new_coverage IS NOT NULL THEN 1 ELSE 0 END) AS new_coverage,
    SUM(CASE WHEN new_lines_to_cover IS NOT NULL THEN 1 ELSE 0 END) AS new_lines_to_cover,
    SUM(CASE WHEN new_uncovered_lines IS NOT NULL THEN 1 ELSE 0 END) AS new_uncovered_lines,
    SUM(CASE WHEN new_line_coverage IS NOT NULL THEN 1 ELSE 0 END) AS new_line_coverage,
    SUM(CASE WHEN new_conditions_to_cover IS NOT NULL THEN 1 ELSE 0 END) AS new_conditions_to_cover,
    SUM(CASE WHEN new_uncovered_conditions IS NOT NULL THEN 1 ELSE 0 END) AS new_uncovered_conditions,
    SUM(CASE WHEN new_branch_coverage IS NOT NULL THEN 1 ELSE 0 END) AS new_branch_coverage,
    SUM(CASE WHEN executable_lines_data IS NOT NULL THEN 1 ELSE 0 END) AS executable_lines_data,
    SUM(CASE WHEN public_api IS NOT NULL THEN 1 ELSE 0 END) AS public_api,
    SUM(CASE WHEN public_documented_api_density IS NOT NULL THEN 1 ELSE 0 END) AS public_documented_api_density,
    SUM(CASE WHEN public_undocumented_api IS NOT NULL THEN 1 ELSE 0 END) AS public_undocumented_api,
    SUM(CASE WHEN duplicated_lines IS NOT NULL THEN 1 ELSE 0 END) AS duplicated_lines,
    SUM(CASE WHEN duplicated_lines_density IS NOT NULL THEN 1 ELSE 0 END) AS duplicated_lines_density,
    SUM(CASE WHEN duplicated_blocks IS NOT NULL THEN 1 ELSE 0 END) AS duplicated_blocks,
    SUM(CASE WHEN duplicated_files IS NOT NULL THEN 1 ELSE 0 END) AS duplicated_files,
    SUM(CASE WHEN duplications_data IS NOT NULL THEN 1 ELSE 0 END) AS duplications_data,
    SUM(CASE WHEN new_duplicated_lines IS NOT NULL THEN 1 ELSE 0 END) AS new_duplicated_lines,
    SUM(CASE WHEN new_duplicated_blocks IS NOT NULL THEN 1 ELSE 0 END) AS new_duplicated_blocks,
    SUM(CASE WHEN new_duplicated_lines_density IS NOT NULL THEN 1 ELSE 0 END) AS new_duplicated_lines_density,
    SUM(CASE WHEN quality_profiles IS NOT NULL THEN 1 ELSE 0 END) AS quality_profiles,
    SUM(CASE WHEN quality_gate_details IS NOT NULL THEN 1 ELSE 0 END) AS quality_gate_details,
    SUM(CASE WHEN violations IS NOT NULL THEN 1 ELSE 0 END) AS violations,
    SUM(CASE WHEN blocker_violations IS NOT NULL THEN 1 ELSE 0 END) AS blocker_violations,
    SUM(CASE WHEN critical_violations IS NOT NULL THEN 1 ELSE 0 END) AS critical_violations,
    SUM(CASE WHEN major_violations IS NOT NULL THEN 1 ELSE 0 END) AS major_violations,
    SUM(CASE WHEN minor_violations IS NOT NULL THEN 1 ELSE 0 END) AS minor_violations,
    SUM(CASE WHEN info_violations IS NOT NULL THEN 1 ELSE 0 END) AS info_violations,
    SUM(CASE WHEN new_violations IS NOT NULL THEN 1 ELSE 0 END) AS new_violations,
    SUM(CASE WHEN new_blocker_violations IS NOT NULL THEN 1 ELSE 0 END) AS new_blocker_violations,
    SUM(CASE WHEN new_critical_violations IS NOT NULL THEN 1 ELSE 0 END) AS new_critical_violations,
    SUM(CASE WHEN new_major_violations IS NOT NULL THEN 1 ELSE 0 END) AS new_major_violations,
    SUM(CASE WHEN new_minor_violations IS NOT NULL THEN 1 ELSE 0 END) AS new_minor_violations,
    SUM(CASE WHEN new_info_violations IS NOT NULL THEN 1 ELSE 0 END) AS new_info_violations,
    SUM(CASE WHEN false_positive_issues IS NOT NULL THEN 1 ELSE 0 END) AS false_positive_issues,
    SUM(CASE WHEN open_issues IS NOT NULL THEN 1 ELSE 0 END) AS open_issues,
    SUM(CASE WHEN reopened_issues IS NOT NULL THEN 1 ELSE 0 END) AS reopened_issues,
    SUM(CASE WHEN confirmed_issues IS NOT NULL THEN 1 ELSE 0 END) AS confirmed_issues,
    SUM(CASE WHEN wont_fix_issues IS NOT NULL THEN 1 ELSE 0 END) AS wont_fix_issues,
    SUM(CASE WHEN sqale_index IS NOT NULL THEN 1 ELSE 0 END) AS sqale_index,
    SUM(CASE WHEN sqale_rating IS NOT NULL THEN 1 ELSE 0 END) AS sqale_rating,
    SUM(CASE WHEN development_cost IS NOT NULL THEN 1 ELSE 0 END) AS development_cost,
    SUM(CASE WHEN new_technical_debt IS NOT NULL THEN 1 ELSE 0 END) AS new_technical_debt,
    SUM(CASE WHEN sqale_debt_ratio IS NOT NULL THEN 1 ELSE 0 END) AS projsqale_debt_ratioect,
    SUM(CASE WHEN new_sqale_debt_ratio IS NOT NULL THEN 1 ELSE 0 END) AS new_sqale_debt_ratio,
    SUM(CASE WHEN code_smells IS NOT NULL THEN 1 ELSE 0 END) AS code_smells,
    SUM(CASE WHEN new_code_smells IS NOT NULL THEN 1 ELSE 0 END) AS new_code_smells,
    SUM(CASE WHEN effort_to_reach_maintainability_rating_a IS NOT NULL THEN 1 ELSE 0 END) AS effort_to_reach_maintainability_rating_a,
    SUM(CASE WHEN new_maintainability_rating IS NOT NULL THEN 1 ELSE 0 END) AS new_maintainability_rating,
    SUM(CASE WHEN new_development_cost IS NOT NULL THEN 1 ELSE 0 END) AS new_development_cost,
    SUM(CASE WHEN alert_status IS NOT NULL THEN 1 ELSE 0 END) AS alert_status,
    SUM(CASE WHEN bugs IS NOT NULL THEN 1 ELSE 0 END) AS bugs,
    SUM(CASE WHEN new_bugs IS NOT NULL THEN 1 ELSE 0 END) AS new_bugs,
    SUM(CASE WHEN reliability_remediation_effort IS NOT NULL THEN 1 ELSE 0 END) AS reliability_remediation_effort,
    SUM(CASE WHEN new_reliability_remediation_effort IS NOT NULL THEN 1 ELSE 0 END) AS new_reliability_remediation_effort,
    SUM(CASE WHEN reliability_rating IS NOT NULL THEN 1 ELSE 0 END) AS reliability_rating,
    SUM(CASE WHEN new_reliability_rating IS NOT NULL THEN 1 ELSE 0 END) AS new_reliability_rating,
    SUM(CASE WHEN last_commit_date IS NOT NULL THEN 1 ELSE 0 END) AS last_commit_date,
    SUM(CASE WHEN vulnerabilities IS NOT NULL THEN 1 ELSE 0 END) AS vulnerabilities,
    SUM(CASE WHEN new_vulnerabilities IS NOT NULL THEN 1 ELSE 0 END) AS new_vulnerabilities,
    SUM(CASE WHEN security_remediation_effort IS NOT NULL THEN 1 ELSE 0 END) AS security_remediation_effort,
    SUM(CASE WHEN new_security_remediation_effort IS NOT NULL THEN 1 ELSE 0 END) AS new_security_remediation_effort,
    SUM(CASE WHEN security_rating IS NOT NULL THEN 1 ELSE 0 END) AS security_rating,
    SUM(CASE WHEN new_security_rating IS NOT NULL THEN 1 ELSE 0 END) AS new_security_rating,
    SUM(CASE WHEN security_hotspots IS NOT NULL THEN 1 ELSE 0 END) AS security_hotspots,
    SUM(CASE WHEN new_security_hotspots IS NOT NULL THEN 1 ELSE 0 END) AS new_security_hotspots,
    SUM(CASE WHEN security_review_rating IS NOT NULL THEN 1 ELSE 0 END) AS security_review_rating,
    SUM(CASE WHEN classes IS NOT NULL THEN 1 ELSE 0 END) AS classes,
    SUM(CASE WHEN ncloc IS NOT NULL THEN 1 ELSE 0 END) AS ncloc,
    SUM(CASE WHEN functions IS NOT NULL THEN 1 ELSE 0 END) AS functions,
    SUM(CASE WHEN comment_lines IS NOT NULL THEN 1 ELSE 0 END) AS comment_lines,
    SUM(CASE WHEN comment_lines_density IS NOT NULL THEN 1 ELSE 0 END) AS comment_lines_density,
    SUM(CASE WHEN files IS NOT NULL THEN 1 ELSE 0 END) AS files,
    SUM(CASE WHEN directories IS NOT NULL THEN 1 ELSE 0 END) AS directories,
    SUM(CASE WHEN lines IS NOT NULL THEN 1 ELSE 0 END) AS lines,
    SUM(CASE WHEN statements IS NOT NULL THEN 1 ELSE 0 END) AS statements,
    SUM(CASE WHEN generated_lines IS NOT NULL THEN 1 ELSE 0 END) AS generated_lines,
    SUM(CASE WHEN generated_ncloc IS NOT NULL THEN 1 ELSE 0 END) AS generated_ncloc,
    SUM(CASE WHEN ncloc_data IS NOT NULL THEN 1 ELSE 0 END) AS ncloc_data,
    SUM(CASE WHEN comment_lines_data IS NOT NULL THEN 1 ELSE 0 END) AS comment_lines_data,
    SUM(CASE WHEN projects IS NOT NULL THEN 1 ELSE 0 END) AS projects,
    SUM(CASE WHEN ncloc_language_distribution IS NOT NULL THEN 1 ELSE 0 END) AS ncloc_language_distribution,
    SUM(CASE WHEN new_lines IS NOT NULL THEN 1 ELSE 0 END) AS new_lines
FROM sonarqube;